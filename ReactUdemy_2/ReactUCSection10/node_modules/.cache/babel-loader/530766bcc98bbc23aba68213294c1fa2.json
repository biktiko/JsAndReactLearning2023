{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkPlace\\\\Programming\\\\ReactUdemy_2\\\\ReactUCSection10\\\\src\\\\components\\\\Store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // localStorage\n    localStorage.setItem('onLogin', '1');\n    setIsLoggedIn(true);\n  };\n\n  useEffect(() => {\n    if (localStorage['onLogin'] === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.setItem('onLogin', '0');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","loginHandler","localStorage","setItem","logoutHandler","children"],"sources":["C:/WorkPlace/Programming/ReactUdemy_2/ReactUCSection10/src/components/Store/auth-context.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nconst AuthContext = React.createContext(\r\n    {\r\n        isLoggedIn: false,\r\n        onLogout: ()=>{},\r\n        onLogin: (email, password)=>{}\r\n    }\r\n)\r\n\r\nexport const AuthContextProvider = (props) => {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    const loginHandler = (email, password) => {\r\n      // We should of course check email and password\r\n      // But it's just a dummy/ demo anyways\r\n      // localStorage\r\n      localStorage.setItem('onLogin', '1')\r\n      setIsLoggedIn(true);\r\n    };\r\n  \r\n    useEffect(()=>{\r\n      if(localStorage['onLogin']==='1'){\r\n        setIsLoggedIn(true)\r\n      }\r\n    },[])\r\n  \r\n    const logoutHandler = () => {\r\n      localStorage.setItem('onLogin', '0')\r\n      setIsLoggedIn(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            isLoggedIn: isLoggedIn,\r\n            onLogout: logoutHandler,\r\n            onLogin: loginHandler\r\n          }}>{props.children}</AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAChB;EACIC,UAAU,EAAE,KADhB;EAEIC,QAAQ,EAAE,MAAI,CAAE,CAFpB;EAGIC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAmB,CAAE;AAHlC,CADgB,CAApB;AAQA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAE1C,MAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;;EAEA,MAAMY,YAAY,GAAG,CAACL,KAAD,EAAQC,QAAR,KAAqB;IACxC;IACA;IACA;IACAK,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,GAAhC;IACAH,aAAa,CAAC,IAAD,CAAb;EACD,CAND;;EAQAV,SAAS,CAAC,MAAI;IACZ,IAAGY,YAAY,CAAC,SAAD,CAAZ,KAA0B,GAA7B,EAAiC;MAC/BF,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CAJQ,EAIP,EAJO,CAAT;;EAMA,MAAMI,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,GAAhC;IACAH,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MACzBP,UAAU,EAAEA,UADa;MAEzBC,QAAQ,EAAEU,aAFe;MAGzBT,OAAO,EAAEM;IAHgB,CAA7B;IAAA,UAIMF,KAAK,CAACM;EAJZ;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CA9BM;;GAAMP,mB;;KAAAA,mB;AAgCb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}