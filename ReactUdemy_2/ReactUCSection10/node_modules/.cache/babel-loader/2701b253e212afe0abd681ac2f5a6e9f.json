{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkPlace\\\\Programming\\\\ReactUdemy_2\\\\ReactUCSection10\\\\src\\\\components\\\\Store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\n\nconst AuthContextProvdirer = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // localStorage\n    localStorage.setItem('onLogin', '1');\n    setIsLoggedIn(true);\n  };\n\n  useEffect(() => {\n    if (localStorage['onLogin'] === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.setItem('onLogin', '0');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvdirer, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvdirer;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvdirer\");","map":{"version":3,"names":["React","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvdirer","setIsLoggedIn","useState","loginHandler","email","password","localStorage","setItem","useEffect","logoutHandler","props","children"],"sources":["C:/WorkPlace/Programming/ReactUdemy_2/ReactUCSection10/src/components/Store/auth-context.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst AuthContext = React.createContext(\r\n    {\r\n        isLoggedIn: false,\r\n        onLogout: ()=>{}\r\n    }\r\n)\r\n\r\nconst AuthContextProvdirer = () => {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    const loginHandler = (email, password) => {\r\n      // We should of course check email and password\r\n      // But it's just a dummy/ demo anyways\r\n      // localStorage\r\n      localStorage.setItem('onLogin', '1')\r\n      setIsLoggedIn(true);\r\n    };\r\n  \r\n    useEffect(()=>{\r\n      if(localStorage['onLogin']==='1'){\r\n        setIsLoggedIn(true)\r\n      }\r\n    },[])\r\n  \r\n    const logoutHandler = () => {\r\n      localStorage.setItem('onLogin', '0')\r\n      setIsLoggedIn(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            isLoggedIn: isLoggedIn,\r\n            onLogout: logoutHandler\r\n          }}>{props.children}</AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,gBAAGD,KAAK,CAACE,aAAN,CAChB;EACIC,UAAU,EAAE,KADhB;EAEIC,QAAQ,EAAE,MAAI,CAAE;AAFpB,CADgB,CAApB;;AAOA,MAAMC,oBAAoB,GAAG,MAAM;EAAA;;EAE/B,MAAM,CAACF,UAAD,EAAaG,aAAb,IAA8BC,QAAQ,CAAC,KAAD,CAA5C;;EAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IACxC;IACA;IACA;IACAC,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,GAAhC;IACAN,aAAa,CAAC,IAAD,CAAb;EACD,CAND;;EAQAO,SAAS,CAAC,MAAI;IACZ,IAAGF,YAAY,CAAC,SAAD,CAAZ,KAA0B,GAA7B,EAAiC;MAC/BL,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CAJQ,EAIP,EAJO,CAAT;;EAMA,MAAMQ,aAAa,GAAG,MAAM;IAC1BH,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,GAAhC;IACAN,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MACzBH,UAAU,EAAEA,UADa;MAEzBC,QAAQ,EAAEU;IAFe,CAA7B;IAAA,UAGMC,KAAK,CAACC;EAHZ;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH,CA7BD;;GAAMX,oB;;KAAAA,oB;AA+BN,eAAeJ,WAAf"},"metadata":{},"sourceType":"module"}