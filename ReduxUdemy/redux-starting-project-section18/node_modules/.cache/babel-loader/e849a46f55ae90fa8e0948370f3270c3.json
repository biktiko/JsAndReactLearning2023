{"ast":null,"code":"// const redux = require('redux'); //import reduex\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    discrement(state) {\n      state.counter--;\n    },\n\n    increse(state, action) {\n      state.counter += action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !showCounter;\n    }\n\n  }\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //store\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increse') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'discrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n};\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //create store\n\nconsole.log(store.getState());\n\nconst counterSubscriber = () => {\n  const latestState = store.getState();\n  console.log(latestState);\n};\n\nstore.subscribe(counterSubscriber); //method call when store is changing\n\nstore.dispatch({\n  type: 'increment'\n}); //change store\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","discrement","increse","action","amount","toggle","counterReducer","type","store","reducer","console","log","getState","counterSubscriber","latestState","subscribe","dispatch","counterActions","actions"],"sources":["C:/WorkPlace/Programming/ReduxUdemy/redux-starting-project-section18/src/store/index.js"],"sourcesContent":["// const redux = require('redux'); //import reduex\r\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {counter: 0, showCounter: true}\r\n\r\nconst counterSlice = createSlice({\r\n    name:\"counter\",\r\n    initialState,\r\n    reducers: {\r\n        increment(state){\r\n            state.counter++\r\n        },\r\n        discrement(state){\r\n            state.counter--\r\n        },\r\n        increse(state, action){\r\n            state.counter+=action.amount\r\n        },\r\n        toggle(state){\r\n            state.showCounter=!showCounter\r\n        }\r\n    }\r\n})\r\n\r\nconst counterReducer = (state = initialState, action) => {     //store\r\n    if(action.type === 'increment'){\r\n        return {\r\n            counter: state.counter+1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if(action.type === 'increse'){\r\n        return {\r\n            counter: state.counter+action.amount,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n    \r\n    if(action.type === 'discrement'){\r\n        return {\r\n            counter: state.counter-1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if(action.type === 'toggle'){\r\n        return {\r\n            showCounter: !state.showCounter,\r\n            counter: state.counter\r\n        }\r\n    }\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer\r\n}); //create store\r\n\r\nconsole.log(store.getState());\r\n\r\nconst counterSubscriber = () => {               \r\n    const latestState = store.getState();\r\n    console.log(latestState)\r\n}\r\n\r\nstore.subscribe(counterSubscriber)      //method call when store is changing\r\n\r\nstore.dispatch({type: 'increment'});    //change store\r\n\r\nexport const counterActions = counterSlice.actions\r\nexport default store"],"mappings":"AAAA;AACA,SAAQA,WAAR,EAAqBC,cAArB,QAA0C,kBAA1C;AAEA,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAE,CAAV;EAAaC,WAAW,EAAE;AAA1B,CAArB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAC,SADwB;EAE7BJ,YAF6B;EAG7BK,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAD,EAAO;MACZA,KAAK,CAACN,OAAN;IACH,CAHK;;IAINO,UAAU,CAACD,KAAD,EAAO;MACbA,KAAK,CAACN,OAAN;IACH,CANK;;IAONQ,OAAO,CAACF,KAAD,EAAQG,MAAR,EAAe;MAClBH,KAAK,CAACN,OAAN,IAAeS,MAAM,CAACC,MAAtB;IACH,CATK;;IAUNC,MAAM,CAACL,KAAD,EAAO;MACTA,KAAK,CAACL,WAAN,GAAkB,CAACA,WAAnB;IACH;;EAZK;AAHmB,CAAD,CAAhC;;AAmBA,MAAMW,cAAc,GAAG,YAAkC;EAAA,IAAjCN,KAAiC,uEAAzBP,YAAyB;EAAA,IAAXU,MAAW;;EAAM;EAC3D,IAAGA,MAAM,CAACI,IAAP,KAAgB,WAAnB,EAA+B;IAC3B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAc,CADpB;MAEHC,WAAW,EAAEK,KAAK,CAACL;IAFhB,CAAP;EAIH;;EAED,IAAGQ,MAAM,CAACI,IAAP,KAAgB,SAAnB,EAA6B;IACzB,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAcS,MAAM,CAACC,MAD3B;MAEHT,WAAW,EAAEK,KAAK,CAACL;IAFhB,CAAP;EAIH;;EAED,IAAGQ,MAAM,CAACI,IAAP,KAAgB,YAAnB,EAAgC;IAC5B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAc,CADpB;MAEHC,WAAW,EAAEK,KAAK,CAACL;IAFhB,CAAP;EAIH;;EAED,IAAGQ,MAAM,CAACI,IAAP,KAAgB,QAAnB,EAA4B;IACxB,OAAO;MACHZ,WAAW,EAAE,CAACK,KAAK,CAACL,WADjB;MAEHD,OAAO,EAAEM,KAAK,CAACN;IAFZ,CAAP;EAIH;AACJ,CA5BD;;AA8BA,MAAMc,KAAK,GAAGhB,cAAc,CAAC;EACzBiB,OAAO,EAAEb,YAAY,CAACa;AADG,CAAD,CAA5B,C,CAEI;;AAEJC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;EAC5B,MAAMC,WAAW,GAAGN,KAAK,CAACI,QAAN,EAApB;EACAF,OAAO,CAACC,GAAR,CAAYG,WAAZ;AACH,CAHD;;AAKAN,KAAK,CAACO,SAAN,CAAgBF,iBAAhB,E,CAAwC;;AAExCL,KAAK,CAACQ,QAAN,CAAe;EAACT,IAAI,EAAE;AAAP,CAAf,E,CAAwC;;AAExC,OAAO,MAAMU,cAAc,GAAGrB,YAAY,CAACsB,OAApC;AACP,eAAeV,KAAf"},"metadata":{},"sourceType":"module"}